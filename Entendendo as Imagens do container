Imagens de conteineres: Uma imagem é um conjunto de camadas que formamos imagens. São independentes entre sí, possuindo ID´s diferentes entre si.

Para acessar suas imagens, digite em seu terminal: docker images ou docker image ls:

 docker images
REPOSITORY                  TAG       IMAGE ID       CREATED        SIZE
ubuntu                      latest    e34e831650c1   13 days ago    77.9MB
hello-world                 latest    d2c94e258dcb   8 months ago   13.3kB
dockersamples/static-site   latest    f589ccde7957   7 years ago    191MB

Agora, para pegarmos mais informações a respeito dessas imagens, digite o comando: docker inspect id_imagem

Para verificar as camadas de uma imagem digite: docker history id_image

docker history f589ccde7957
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
f589ccde7957   7 years ago   /bin/sh -c #(nop) CMD ["/bin/sh" "-c" "cd /u…   0B
<missing>      7 years ago   /bin/sh -c #(nop) WORKDIR /usr/share/nginx/h…   0B
<missing>      7 years ago   /bin/sh -c #(nop) COPY file:c8203f6bfe2ff6ba…   8.75kB
<missing>      7 years ago   /bin/sh -c mkdir -p /usr/share/nginx/html       0B
<missing>      7 years ago   /bin/sh -c #(nop) ENV AUTHOR=Docker             0B
<missing>      7 years ago   /bin/sh -c #(nop) CMD ["nginx" "-g" "daemon …   0B
<missing>      7 years ago   /bin/sh -c #(nop) EXPOSE 443/tcp 80/tcp         0B
<missing>      7 years ago   /bin/sh -c ln -sf /dev/stdout /var/log/nginx…   22B
<missing>      7 years ago   /bin/sh -c apt-key adv --keyserver hkp://pgp…   65.4MB
<missing>      7 years ago   /bin/sh -c #(nop) ENV NGINX_VERSION=1.9.12-1…   0B
<missing>      7 years ago   /bin/sh -c #(nop) MAINTAINER NGINX Docker Ma…   0B
<missing>      7 years ago   /bin/sh -c #(nop) CMD ["/bin/bash"]             0B
<missing>      7 years ago   /bin/sh -c #(nop) ADD file:b5391cb13172fb513…   125MB

Informação importante: Caso já tenhamos uma imagem salva em nosso dispositivo, faremos apenas download das imagens que não temos, para não repetir informações, utilizando as camadas em outras imagens (reutilização de imagens).
Quando temos nossa imagem, temos apenas permissão de leitura (ready only). Não podemos modificar depois de criar, é imutável!

Você se pergunta.. "Se apenas leitura, por que quando dou o comando docker run -it nome_imagem ele pode criar arquivos, navegar em diretórios?"
Resposta: O container é uma imagem adicional de read and write (camada temporária por cima da imagem. Quando deletamos o container, a camada extra é deletada também.

Os conteineres são leves pois: Além de serem processos dentro do sistema, quando ele entra em execução, estamos reaproveitando (reutilizando) as mesmas imagens 
(por exemplo, 10 mil conteineres com as mesmas imagens e diferenciados apenas
por uma em cada de read and write.) Acaba que o tamanho do conteiner tem por maior peso a camada de write que estamos gerando para ele, pois a imagem será reutilizada para cada um deles.
Resumindo: Eles reaproveitam as camadas das imagens que já temos e quando criamos novos conteineres, apenas reutilizamos as mesmas imagens e camadas além da camada adicional de ready and write
